#!/bin/bash

# DevTool - Naver Real Estate 개발 도구 통합 관리
# Scripts, Tests, Database, Monitoring을 하나의 인터페이스로 관리

PROJECT_ROOT="/Users/specialrisk_mac/code_work/naver_realestate"
cd "$PROJECT_ROOT"

# 색상 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# 헤더 출력
print_header() {
    clear
    echo -e "${CYAN}╔════════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║                                                        ║${NC}"
    echo -e "${CYAN}║${NC}     ${BOLD}${PURPLE}🛠️  Naver Real Estate DevTool${NC}              ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC}        ${BLUE}통합 개발 도구 & 모니터링 시스템${NC}           ${CYAN}║${NC}"
    echo -e "${CYAN}║                                                        ║${NC}"
    echo -e "${CYAN}╚════════════════════════════════════════════════════════╝${NC}"
    echo ""
}

# 상태 체크
check_status() {
    echo -e "${BOLD}${BLUE}📊 시스템 상태 확인${NC}"
    echo -e "${CYAN}════════════════════════════════════════════════════════${NC}"
    echo ""

    # Docker 상태
    if docker ps 2>/dev/null | grep -q "postgres"; then
        echo -e "  ${GREEN}✅ PostgreSQL${NC} (포트 5433)"
    else
        echo -e "  ${RED}❌ PostgreSQL${NC} - docker-compose up -d로 시작하세요"
    fi

    if docker ps 2>/dev/null | grep -q "redis"; then
        echo -e "  ${GREEN}✅ Redis${NC} (포트 6380)"
    else
        echo -e "  ${RED}❌ Redis${NC} - docker-compose up -d로 시작하세요"
    fi

    # Backend API
    if curl -s http://localhost:8000/health > /dev/null 2>&1; then
        echo -e "  ${GREEN}✅ Backend API${NC} (포트 8000)"
    else
        echo -e "  ${YELLOW}⚠️  Backend API${NC} - 실행되지 않음"
    fi

    # Frontend
    if curl -s http://localhost:3000 > /dev/null 2>&1; then
        echo -e "  ${GREEN}✅ Frontend${NC} (포트 3000)"
    else
        echo -e "  ${YELLOW}⚠️  Frontend${NC} - 실행되지 않음"
    fi

    # Celery Worker
    if pgrep -f "celery.*worker" > /dev/null 2>&1; then
        echo -e "  ${GREEN}✅ Celery Worker${NC}"
    else
        echo -e "  ${YELLOW}⚠️  Celery Worker${NC} - 실행되지 않음"
    fi

    # Celery Beat
    if pgrep -f "celery.*beat" > /dev/null 2>&1; then
        echo -e "  ${GREEN}✅ Celery Beat${NC}"
    else
        echo -e "  ${YELLOW}⚠️  Celery Beat${NC} - 실행되지 않음"
    fi

    echo ""
}

# 메인 메뉴
show_main_menu() {
    print_header
    check_status

    echo -e "${BOLD}${CYAN}📋 메인 메뉴${NC}"
    echo -e "${CYAN}════════════════════════════════════════════════════════${NC}"
    echo ""
    echo -e "  ${GREEN}${BOLD}1)${NC} 🗄️  데이터베이스 관리"
    echo -e "  ${GREEN}${BOLD}2)${NC} 🧪 테스트 실행"
    echo -e "  ${GREEN}${BOLD}3)${NC} 📊 모니터링 & 상태 확인"
    echo -e "  ${GREEN}${BOLD}4)${NC} 🚀 서비스 관리"
    echo -e "  ${GREEN}${BOLD}5)${NC} 📚 문서 보기"
    echo ""
    echo -e "  ${RED}${BOLD}0)${NC} 🚪 종료"
    echo ""
    echo -e -n "${BOLD}선택${NC} ➤ "
    read choice

    case $choice in
        1) database_menu ;;
        2) test_menu ;;
        3) monitoring_menu ;;
        4) service_menu ;;
        5) docs_menu ;;
        0)
            echo ""
            echo -e "${GREEN}👋 DevTool을 종료합니다.${NC}"
            echo ""
            exit 0
            ;;
        *)
            echo -e "${RED}❌ 잘못된 선택입니다${NC}"
            sleep 1
            show_main_menu
            ;;
    esac
}

# 데이터베이스 메뉴
database_menu() {
    print_header
    echo -e "${BOLD}${CYAN}🗄️  데이터베이스 관리${NC}"
    echo -e "${CYAN}════════════════════════════════════════════════════════${NC}"
    echo ""
    echo -e "  ${GREEN}${BOLD}1)${NC} 📊 데이터베이스 내용 확인 ${BLUE}(check_data.py)${NC}"
    echo -e "  ${GREEN}${BOLD}2)${NC} 🔄 마이그레이션 ${BLUE}(migrate_db.py)${NC}"
    echo -e "  ${GREEN}${BOLD}3)${NC} 🗑️  데이터베이스 초기화 ${RED}[위험]${NC} ${BLUE}(reset_db.py)${NC}"
    echo -e "  ${GREEN}${BOLD}4)${NC} 🐘 PostgreSQL 접속 ${BLUE}(psql)${NC}"
    echo ""
    echo -e "  ${YELLOW}${BOLD}0)${NC} ⬅️  뒤로가기"
    echo ""
    echo -e -n "${BOLD}선택${NC} ➤ "
    read choice

    case $choice in
        1)
            echo ""
            backend/.venv/bin/python scripts/check_data.py
            echo ""
            echo -e "${CYAN}════════════════════════════════════════════════════════${NC}"
            read -p "엔터를 눌러 계속..."
            database_menu
            ;;
        2)
            echo ""
            echo -e "${YELLOW}⚠️  외래키 제약조건을 추가합니다. 계속하시겠습니까? (y/N)${NC}"
            echo -e -n "${BOLD}확인${NC} ➤ "
            read confirm
            if [[ "$confirm" == "y" || "$confirm" == "Y" ]]; then
                backend/.venv/bin/python scripts/migrate_db.py
            else
                echo -e "${BLUE}ℹ️  취소되었습니다.${NC}"
            fi
            echo ""
            echo -e "${CYAN}════════════════════════════════════════════════════════${NC}"
            read -p "엔터를 눌러 계속..."
            database_menu
            ;;
        3)
            echo ""
            echo -e "${RED}${BOLD}⚠️⚠️⚠️  경고: 모든 데이터가 삭제됩니다! ⚠️⚠️⚠️${NC}"
            echo -e "${RED}정말로 계속하시겠습니까? (yes 입력 필요)${NC}"
            echo -e -n "${BOLD}확인${NC} ➤ "
            read confirm
            if [[ "$confirm" == "yes" ]]; then
                backend/.venv/bin/python scripts/reset_db.py
            else
                echo -e "${BLUE}ℹ️  취소되었습니다.${NC}"
            fi
            echo ""
            echo -e "${CYAN}════════════════════════════════════════════════════════${NC}"
            read -p "엔터를 눌러 계속..."
            database_menu
            ;;
        4)
            echo ""
            docker exec -it naver_realestate-postgres-1 psql -U postgres -d naver_realestate
            echo ""
            echo -e "${CYAN}════════════════════════════════════════════════════════${NC}"
            read -p "엔터를 눌러 계속..."
            database_menu
            ;;
        0) show_main_menu ;;
        *)
            echo -e "${RED}❌ 잘못된 선택입니다${NC}"
            sleep 1
            database_menu
            ;;
    esac
}

# 테스트 메뉴
test_menu() {
    print_header
    echo -e "${BOLD}${CYAN}🧪 테스트 실행${NC}"
    echo -e "${CYAN}════════════════════════════════════════════════════════${NC}"
    echo ""
    echo -e "  ${GREEN}${BOLD}1)${NC} 🌐 API 테스트 ${BLUE}(test_api.sh)${NC}"
    echo -e "  ${GREEN}${BOLD}2)${NC} 💰 실거래가 API 테스트 ${BLUE}(test_transaction_api.sh)${NC}"
    echo -e "  ${GREEN}${BOLD}3)${NC} 💬 Discord 브리핑 테스트 ${BLUE}(test_discord_briefing.sh)${NC}"
    echo -e "  ${GREEN}${BOLD}4)${NC} 🔄 전체 테스트 실행"
    echo ""
    echo -e "  ${YELLOW}${BOLD}0)${NC} ⬅️  뒤로가기"
    echo ""
    echo -e -n "${BOLD}선택${NC} ➤ "
    read choice

    case $choice in
        1)
            echo ""
            ./tests/test_api.sh
            echo ""
            echo -e "${CYAN}════════════════════════════════════════════════════════${NC}"
            read -p "엔터를 눌러 계속..."
            test_menu
            ;;
        2)
            echo ""
            ./tests/test_transaction_api.sh
            echo ""
            echo -e "${CYAN}════════════════════════════════════════════════════════${NC}"
            read -p "엔터를 눌러 계속..."
            test_menu
            ;;
        3)
            echo ""
            ./tests/test_discord_briefing.sh
            echo ""
            echo -e "${CYAN}════════════════════════════════════════════════════════${NC}"
            read -p "엔터를 눌러 계속..."
            test_menu
            ;;
        4)
            echo ""
            echo -e "${BLUE}${BOLD}🔄 전체 테스트 시작...${NC}"
            echo ""
            ./tests/test_api.sh
            echo ""
            ./tests/test_transaction_api.sh
            echo ""
            ./tests/test_discord_briefing.sh
            echo ""
            echo -e "${GREEN}${BOLD}✅ 전체 테스트 완료${NC}"
            echo ""
            echo -e "${CYAN}════════════════════════════════════════════════════════${NC}"
            read -p "엔터를 눌러 계속..."
            test_menu
            ;;
        0) show_main_menu ;;
        *)
            echo -e "${RED}❌ 잘못된 선택입니다${NC}"
            sleep 1
            test_menu
            ;;
    esac
}

# 모니터링 메뉴
monitoring_menu() {
    print_header
    echo -e "${BOLD}${CYAN}📊 모니터링 & 상태 확인${NC}"
    echo -e "${CYAN}════════════════════════════════════════════════════════${NC}"
    echo ""
    echo -e "  ${GREEN}${BOLD}1)${NC} 📅 스케줄 & 크롤링 상태 ${BLUE}(check_schedules.sh)${NC}"
    echo -e "  ${GREEN}${BOLD}2)${NC} 📜 로그 실시간 보기 ${BLUE}(logs_all.sh)${NC}"
    echo -e "  ${GREEN}${BOLD}3)${NC} 🐳 Docker 컨테이너 상태"
    echo -e "  ${GREEN}${BOLD}4)${NC} 🔍 프로세스 상태 ${BLUE}(ps)${NC}"
    echo -e "  ${GREEN}${BOLD}5)${NC} 🌐 웹 UI 열기"
    echo ""
    echo -e "  ${YELLOW}${BOLD}0)${NC} ⬅️  뒤로가기"
    echo ""
    echo -e -n "${BOLD}선택${NC} ➤ "
    read choice

    case $choice in
        1)
            echo ""
            ./scripts/check_schedules.sh
            echo ""
            echo -e "${CYAN}════════════════════════════════════════════════════════${NC}"
            read -p "엔터를 눌러 계속..."
            monitoring_menu
            ;;
        2)
            echo ""
            ./logs_all.sh
            ;;
        3)
            echo ""
            docker ps
            echo ""
            echo -e "${CYAN}════════════════════════════════════════════════════════${NC}"
            read -p "엔터를 눌러 계속..."
            monitoring_menu
            ;;
        4)
            echo ""
            echo -e "${BLUE}${BOLD}Backend API:${NC}"
            ps aux | grep "uvicorn" | grep -v grep || echo "  ${YELLOW}실행 중이 아님${NC}"
            echo ""
            echo -e "${BLUE}${BOLD}Celery Worker:${NC}"
            ps aux | grep "celery.*worker" | grep -v grep || echo "  ${YELLOW}실행 중이 아님${NC}"
            echo ""
            echo -e "${BLUE}${BOLD}Celery Beat:${NC}"
            ps aux | grep "celery.*beat" | grep -v grep || echo "  ${YELLOW}실행 중이 아님${NC}"
            echo ""
            echo -e "${BLUE}${BOLD}Frontend:${NC}"
            ps aux | grep "next-server" | grep -v grep || echo "  ${YELLOW}실행 중이 아님${NC}"
            echo ""
            echo -e "${CYAN}════════════════════════════════════════════════════════${NC}"
            read -p "엔터를 눌러 계속..."
            monitoring_menu
            ;;
        5)
            echo ""
            echo -e "${BLUE}${BOLD}🌐 웹 UI 열기...${NC}"
            open http://localhost:3000 2>/dev/null || xdg-open http://localhost:3000 2>/dev/null || echo "브라우저를 수동으로 열어주세요: http://localhost:3000"
            open http://localhost:8000/docs 2>/dev/null || xdg-open http://localhost:8000/docs 2>/dev/null
            echo ""
            echo -e "${CYAN}════════════════════════════════════════════════════════${NC}"
            read -p "엔터를 눌러 계속..."
            monitoring_menu
            ;;
        0) show_main_menu ;;
        *)
            echo -e "${RED}❌ 잘못된 선택입니다${NC}"
            sleep 1
            monitoring_menu
            ;;
    esac
}

# 서비스 관리 메뉴
service_menu() {
    print_header
    echo -e "${BOLD}${CYAN}🚀 서비스 관리${NC}"
    echo -e "${CYAN}════════════════════════════════════════════════════════${NC}"
    echo ""
    echo -e "  ${GREEN}${BOLD}1)${NC} 🟢 모든 서비스 시작 ${BLUE}(start_all.sh)${NC}"
    echo -e "  ${GREEN}${BOLD}2)${NC} 🔴 모든 서비스 중지 ${BLUE}(stop_all.sh)${NC}"
    echo -e "  ${GREEN}${BOLD}3)${NC} 🔄 Docker 컨테이너 시작"
    echo -e "  ${GREEN}${BOLD}4)${NC} 🛑 Docker 컨테이너 중지"
    echo -e "  ${GREEN}${BOLD}5)${NC} 🔧 개별 서비스 관리"
    echo ""
    echo -e "  ${YELLOW}${BOLD}0)${NC} ⬅️  뒤로가기"
    echo ""
    echo -e -n "${BOLD}선택${NC} ➤ "
    read choice

    case $choice in
        1)
            echo ""
            ./start_all.sh
            echo ""
            echo -e "${CYAN}════════════════════════════════════════════════════════${NC}"
            read -p "엔터를 눌러 계속..."
            service_menu
            ;;
        2)
            echo ""
            ./stop_all.sh
            echo ""
            echo -e "${CYAN}════════════════════════════════════════════════════════${NC}"
            read -p "엔터를 눌러 계속..."
            service_menu
            ;;
        3)
            echo ""
            docker-compose up -d
            echo ""
            echo -e "${CYAN}════════════════════════════════════════════════════════${NC}"
            read -p "엔터를 눌러 계속..."
            service_menu
            ;;
        4)
            echo ""
            docker-compose down
            echo ""
            echo -e "${CYAN}════════════════════════════════════════════════════════${NC}"
            read -p "엔터를 눌러 계속..."
            service_menu
            ;;
        5)
            individual_service_menu
            ;;
        0) show_main_menu ;;
        *)
            echo -e "${RED}❌ 잘못된 선택입니다${NC}"
            sleep 1
            service_menu
            ;;
    esac
}

# 개별 서비스 관리
individual_service_menu() {
    print_header
    echo -e "${BOLD}${CYAN}🔧 개별 서비스 관리${NC}"
    echo -e "${CYAN}════════════════════════════════════════════════════════${NC}"
    echo ""
    echo -e "${GREEN}  시작:${NC}"
    echo -e "  ${GREEN}${BOLD}1)${NC} 🟢 Backend API"
    echo -e "  ${GREEN}${BOLD}2)${NC} 🟢 Celery Worker"
    echo -e "  ${GREEN}${BOLD}3)${NC} 🟢 Celery Beat"
    echo -e "  ${GREEN}${BOLD}4)${NC} 🟢 Frontend"
    echo ""
    echo -e "${RED}  중지:${NC}"
    echo -e "  ${RED}${BOLD}5)${NC} 🔴 Backend API"
    echo -e "  ${RED}${BOLD}6)${NC} 🔴 Celery Worker"
    echo -e "  ${RED}${BOLD}7)${NC} 🔴 Celery Beat"
    echo -e "  ${RED}${BOLD}8)${NC} 🔴 Frontend"
    echo ""
    echo -e "  ${YELLOW}${BOLD}0)${NC} ⬅️  뒤로가기"
    echo ""
    echo -e -n "${BOLD}선택${NC} ➤ "
    read choice

    case $choice in
        1)
            echo ""
            cd backend && nohup .venv/bin/uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload > ../logs/backend.log 2>&1 &
            echo -e "${GREEN}${BOLD}✅ Backend API 시작됨${NC}"
            sleep 2
            individual_service_menu
            ;;
        2)
            echo ""
            cd backend && nohup ./run_celery_worker.sh > ../logs/worker.log 2>&1 &
            echo -e "${GREEN}${BOLD}✅ Celery Worker 시작됨${NC}"
            sleep 2
            individual_service_menu
            ;;
        3)
            echo ""
            cd backend && nohup ./run_celery_beat.sh > ../logs/beat.log 2>&1 &
            echo -e "${GREEN}${BOLD}✅ Celery Beat 시작됨${NC}"
            sleep 2
            individual_service_menu
            ;;
        4)
            echo ""
            cd frontend && nohup npm run dev > ../logs/frontend.log 2>&1 &
            echo -e "${GREEN}${BOLD}✅ Frontend 시작됨${NC}"
            sleep 2
            individual_service_menu
            ;;
        5)
            echo ""
            pkill -f "uvicorn app.main:app"
            echo -e "${RED}${BOLD}🔴 Backend API 중지됨${NC}"
            sleep 1
            individual_service_menu
            ;;
        6)
            echo ""
            pkill -f "celery.*worker"
            echo -e "${RED}${BOLD}🔴 Celery Worker 중지됨${NC}"
            sleep 1
            individual_service_menu
            ;;
        7)
            echo ""
            pkill -f "celery.*beat"
            echo -e "${RED}${BOLD}🔴 Celery Beat 중지됨${NC}"
            sleep 1
            individual_service_menu
            ;;
        8)
            echo ""
            pkill -f "next-server"
            echo -e "${RED}${BOLD}🔴 Frontend 중지됨${NC}"
            sleep 1
            individual_service_menu
            ;;
        0) service_menu ;;
        *)
            echo -e "${RED}❌ 잘못된 선택입니다${NC}"
            sleep 1
            individual_service_menu
            ;;
    esac
}

# 문서 메뉴
docs_menu() {
    print_header
    echo -e "${BOLD}${CYAN}📚 문서 보기${NC}"
    echo -e "${CYAN}════════════════════════════════════════════════════════${NC}"
    echo ""
    echo -e "  ${GREEN}${BOLD}1)${NC} 📖 시작 가이드 ${BLUE}(README_STARTUP.md)${NC}"
    echo -e "  ${GREEN}${BOLD}2)${NC} 🤖 개발 가이드 ${BLUE}(CLAUDE.md)${NC}"
    echo -e "  ${GREEN}${BOLD}3)${NC} 🗄️  스크립트 문서 ${BLUE}(scripts/README.md)${NC}"
    echo -e "  ${GREEN}${BOLD}4)${NC} 🧪 테스트 문서 ${BLUE}(tests/README.md)${NC}"
    echo -e "  ${GREEN}${BOLD}5)${NC} 🏗️  프로젝트 구조 ${BLUE}(docs/PROJECT_STRUCTURE.md)${NC}"
    echo -e "  ${GREEN}${BOLD}6)${NC} 🛠️  DevTool 가이드 ${BLUE}(DEVTOOL.md)${NC}"
    echo ""
    echo -e "  ${YELLOW}${BOLD}0)${NC} ⬅️  뒤로가기"
    echo ""
    echo -e -n "${BOLD}선택${NC} ➤ "
    read choice

    case $choice in
        1)
            less README_STARTUP.md
            docs_menu
            ;;
        2)
            less CLAUDE.md
            docs_menu
            ;;
        3)
            less scripts/README.md
            docs_menu
            ;;
        4)
            less tests/README.md
            docs_menu
            ;;
        5)
            less docs/PROJECT_STRUCTURE.md
            docs_menu
            ;;
        6)
            less DEVTOOL.md
            docs_menu
            ;;
        0) show_main_menu ;;
        *)
            echo -e "${RED}❌ 잘못된 선택입니다${NC}"
            sleep 1
            docs_menu
            ;;
    esac
}

# 메인 실행
if [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
    echo -e "${BOLD}${PURPLE}DevTool - Naver Real Estate 통합 개발 도구${NC}"
    echo ""
    echo -e "${BOLD}사용법:${NC} ./devtool [옵션]"
    echo ""
    echo -e "${BOLD}옵션:${NC}"
    echo "  (없음)     대화형 메뉴 시작"
    echo "  --help     도움말 표시"
    echo ""
    exit 0
fi

# 대화형 메뉴 시작
show_main_menu
