version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: naver_realestate_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: naver_realestate
    ports:
      - "5433:5432"  # 외부 포트를 5433으로 변경 (NAS의 5432와 충돌 방지)
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis (캐시 및 Celery 메시지 브로커)
  redis:
    image: redis:7-alpine
    container_name: naver_realestate_redis
    ports:
      - "6380:6379"  # 로컬은 6380 포트 사용 (NAS와 분리)
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # FastAPI 백엔드
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: naver_realestate_api
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/naver_realestate
      - REDIS_URL=redis://redis:6379/0
      - MOLIT_API_KEY=${MOLIT_API_KEY}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL:-}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Celery Worker (크롤링 작업)
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: naver_realestate_celery_worker
    command: celery -A app.core.celery_app worker --loglevel=info --pool=solo
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/naver_realestate
      - REDIS_URL=redis://redis:6379/0
      - MOLIT_API_KEY=${MOLIT_API_KEY}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL:-}
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Celery Beat (스케줄러)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: naver_realestate_celery_beat
    command: celery -A app.core.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/naver_realestate
      - REDIS_URL=redis://redis:6379/0
      - MOLIT_API_KEY=${MOLIT_API_KEY}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL:-}
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Next.js 프론트엔드
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: naver_realestate_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - api
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
